# -*- coding: utf-8 -*-
"""pet classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bu-0Gj_qaskIyTIIX0mqL-fIvbdr2lM3
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

!wget https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip

!unzip kagglecatsanddogs_3367a.zip

datadir="PetImages"
categories=["Dog","Cat"]

for category in categories:
    path=os.path.join(datadir,category)
    for img in os.listdir(path):
        img_array=cv2.imread(os.path.join(path,img))
        plt.imshow(img_array)
        plt.show()
        break
    break

img_size=100
new_array=cv2.resize(img_array,(img_size,img_size))
plt.imshow(new_array)
plt.show()

training_data=[]
def create_training_data():
    for category in categories:
        path=os.path.join(datadir,category)
        class_num=categories.index(category)
        for img in os.listdir(path):
            try:
                img_array=cv2.imread(os.path.join(path,img))
                new_array=cv2.resize(img_array,(img_size,img_size))
                training_data.append([new_array,class_num])
            except Exception as e:
                pass
create_training_data()

print(len(training_data))

import random
random.shuffle(training_data)

x=[]
y=[]
for features,labels in training_data:
    x.append(features)
    y.append(labels)
x=np.array(x).reshape(-1,img_size,img_size,3)

import pickle

pickle_out=open("x.pickle","wb")
pickle.dump(x,pickle_out)
pickle_out.close()


pickle_out=open("y.pickle","wb")
pickle.dump(y,pickle_out)
pickle_out.close()

pickle_in=open("x.pickle","rb")
x=pickle.load(pickle_in)

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D

import pickle
x=pickle.load(open("x.pickle","rb"))
y=pickle.load(open("y.pickle","rb"))

x=x/255.0
print(x.shape)

model=Sequential()

model.add(Conv2D(32,(3,3),input_shape=x.shape[1:]))
model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))


model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation("relu"))
model.add(Dropout(0.5))

model.add(Dense(1))
model.add(Activation("sigmoid"))

model.fit(x,y,batch_size=32,epochs=20,validation_split=0.1)

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

predictions=model.predict(x)
print(predictions[1410])

plt.imshow(x[1410])
plt.show()

#now demonstrating with my own pets
from google.colab import drive
drive.mount('/content/drive')

scooby=r'/content/drive/My Drive/scooby.jpg'

img_array=cv2.imread(scooby)
plt.imshow(img_array)
plt.show()

new_array=cv2.resize(img_array,(img_size,img_size))
plt.imshow(new_array)
plt.show()

scooby=np.array(new_array).reshape(-1,img_size,img_size,3)
scooby=scooby/255.0
print(scooby)

prediction=model.predict(scooby)
print(prediction)

laddu=r'/content/drive/My Drive/laddu.jpg'

img_array=cv2.imread(laddu)
plt.imshow(img_array)
plt.show()

new_array=cv2.resize(img_array,(img_size,img_size))
plt.imshow(new_array)
plt.show()

laddu=np.array(new_array).reshape(-1,img_size,img_size,3)
laddu=laddu/255.0
print(laddu)

prediction=model.predict(laddu)
print(prediction)

#now some random images downloaded from internet
!wget http://3.bp.blogspot.com/-sWdCJqdgrbU/T_peu9rUdVI/AAAAAAAAESE/SpWF93ljOYs/s1600/Beautiful+dog+hd+Wallpapers_1.jpg

!wget https://static01.nyt.com/images/2019/06/04/nyregion/04claws2/04claws2-facebookJumbo.jpg

whitedog=r'/content/whitedog.jpg'

img_array=cv2.imread(whitedog)
plt.imshow(img_array)
plt.show()

new_array=cv2.resize(img_array,(img_size,img_size))
plt.imshow(new_array)
plt.show()

whitedog=np.array(new_array).reshape(-1,img_size,img_size,3)
whitedog=whitedog/255.0
print(whitedog)

prediction=model.predict(whitedog)
print(prediction)

whitecat=r'/content/whitecat.jpg'

img_array=cv2.imread(whitecat)
plt.imshow(img_array)
plt.show()

new_array=cv2.resize(img_array,(img_size,img_size))
plt.imshow(new_array)
plt.show()

whitecat=np.array(new_array).reshape(-1,img_size,img_size,3)
whitecat=whitecat/255.0
print(whitecat)

prediction=model.predict(whitecat)
print(prediction)

